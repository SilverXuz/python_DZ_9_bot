from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from create_bot import bot
from keyboards import calcMenu, genMenu, kb_calc_end
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters import Text


class CalcStates(StatesGroup):
    waiting_for_first_number = State()
    waiting_for_operation = State()
    waiting_for_second_number = State()


async def start_calculation(message: types.Message):
    print(f'–ò–≥—Ä–æ–∫ {message.from_user.full_name} –ø–æ–ª—å–∑—É–µ—Ç—Å—è –ü—Ä–æ—Å—Ç–æ–π üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!')
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ', reply_markup=calcMenu)
    await CalcStates.waiting_for_first_number.set()

async def cancel_calc(message: types.Message, state: FSMContext):
    curent_state = await state.get_state()
    if curent_state is None:
        return
    await state.finish()
    await message.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!', reply_markup=genMenu)

async def choosing_first_number(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=calcMenu)
        return
    await state.update_data(first_number=int(message.text))
    await CalcStates.next()
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫: ', reply_markup=calcMenu)

async def choosing_operation(message: types.Message, state: FSMContext):
    AVAILABLE_OPERATIONS = ['+', '-', '*', '/']
    if message.text not in AVAILABLE_OPERATIONS:
        await message.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=calcMenu)
        return
    await state.update_data(operation=message.text)
    await CalcStates.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ', reply_markup=calcMenu)

async def choosing_second_number(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=calcMenu)
        return
    user_data = await state.get_data()
    oper = user_data['operation']
    first_number = user_data['first_number']
    second_number = int(message.text)
    result = 0
    if oper == '+':
        result = first_number+second_number
    elif oper == '-':
        result = first_number-second_number
    elif oper == '*':
        result = first_number*second_number
    elif oper == '/':
        result = first_number/second_number
    await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç {result}', reply_markup=kb_calc_end)
    await state.finish()

# –ö–Ω–æ–ø–∫–∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ
async def reload_game(message: types.Message):
    await start_calculation(message)


# –ö–Ω–æ–ø–∫–∞ üîô –í—ã—Ö–æ–¥
async def text_back_calc(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã!', reply_markup=genMenu)


def register_handlers_calc(dp: Dispatcher):
    dp.register_message_handler(start_calculation, text='–ü—Ä–æ—Å—Ç–æ–π', state='*')
    dp.register_message_handler(cancel_calc, state="*", commands='–û—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_calc, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(choosing_first_number, state=CalcStates.waiting_for_first_number)
    dp.register_message_handler(choosing_operation, state=CalcStates.waiting_for_operation)
    dp.register_message_handler(choosing_second_number, state=CalcStates.waiting_for_second_number)
    dp.register_message_handler(reload_game, text=['–ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ'])
    dp.register_message_handler(text_back_calc, text=['üîô –í—ã—Ö–æ–¥ üßÆ'])
