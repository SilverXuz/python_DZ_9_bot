from aiogram import types, Dispatcher
import re
from keyboards import kb_calc_eval_end, genMenu, calc_evalMenu
from data_base import db
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from create_bot import bot


class FCMcalc_eval(StatesGroup):
    input_value = State()
    operation = State()


async def start_calc_eval(message: types.Message) -> None:
    await FCMcalc_eval.input_value.set()
    await message.answer(text=f'–≠—Ç–æ {message.text}')
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ä–µ—à–µ–Ω–∏—è: ', reply_markup=calc_evalMenu)

async def back_calc_eval(message: types.Message, state: FCMcalc_eval):
    curent_state = await state.get_state()
    if curent_state is None:
        return
    await state.finish()
    await message.answer(text=f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
                         reply_markup=genMenu)

async def operation_calc_eval(message: types.Message, state: FSMContext):
    exp = message.text.replace('/calc', '')
    exp = message.text.replace(',', '.')
    exp = message.text.replace('\\', '/')
    exp = "".join(exp.split())
    if re.match('^([-+]?([(]?[0-9][)]?[+-/*]?))*$', exp):
        try:
            await message.reply(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {eval(exp)}', reply_markup=kb_calc_eval_end)
            await state.finish()
        except:
            await message.reply('–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—á–µ—Ç–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!')
            await db.write_to_log_calc(f'–ü–æ–∏—Å–∫: {message.text}. –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—á–µ—Ç–µ', reply_markup=kb_calc_eval_end)
            await state.finish()
    else:
        await message.reply('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!')
        await db.write_to_log_calc(f'–ü–æ–∏—Å–∫: {message.text}. –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞', reply_markup=kb_calc_eval_end)
        await state.finish()


# –ö–Ω–æ–ø–∫–∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ
async def reload_game(message: types.Message):
    await start_calc_eval(message)


# –ö–Ω–æ–ø–∫–∞ üîô –í—ã—Ö–æ–¥
async def text_back_calc(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã!', reply_markup=genMenu)


def register_handlers_calc_eval(dp: Dispatcher):
    dp.register_message_handler(start_calc_eval, text=['–£–ª—É—á—à–µ–Ω–Ω—ã–π'], state=None)
    dp.register_message_handler(back_calc_eval, state="*", commands='–û—Ç–º–µ–Ω–∞ +')
    dp.register_message_handler(back_calc_eval, Text(equals='–û—Ç–º–µ–Ω–∞ +', ignore_case=True), state="*")
    dp.register_message_handler(operation_calc_eval, state=FCMcalc_eval.input_value)
    dp.register_message_handler(reload_game, text=['–ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ +'])
    dp.register_message_handler(text_back_calc, text=['üîô –í—ã—Ö–æ–¥ üßÆ+'])
